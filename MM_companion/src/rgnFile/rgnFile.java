/**
 *
 *  rgnFile v1, 3 sept. 2012 
    Fabrice P Cordelieres, fabrice.cordelieres at gmail.com
    
    Copyright (C) 2012 Fabrice P. Cordelieres
  
    License:
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package rgnFile;

import ij.IJ;
import ij.io.OpenDialog;
import ij.io.SaveDialog;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import ndFile.ndFile;
import rgnFile.content.roi;


//rgn file format:
//----------------
//
//Ex: rectangle Roi:
//0 1, 1 255, 2 70 71, 3 0 0, 4 0, 5 1, 6 2 158 138, 7 1
//
//Ex2: circle
//0 2, 1 8388608, 2 27 163, 3 0 0, 4 0, 5 1, 6 2 27 163 268 199, 7 4
//
//Ex3: oval
//0 2, 1 8421376, 2 284 193, 3 0 0, 4 0, 5 1, 6 5 284 193 372 332 442 211 483 279 491 214, 7 5
//
//
//7 fields delimited by number [0-7]+space+value+coma
//0: Roi type
//	1: Rectangle
//	2: Polyline
//	3: Polygon
//	4: Not used
//	5: Oval
//	6: Freehand
//
//1: Color
//	Color (decimal value)
//
//	Conversions:
//	------------
// 
//	RGB>DEC
//	D=B*256^2+G*256+R
// 
//	DEC>RGB
//	B=INT(D/256^2)
//	G=INT((D-B*256^2)/256)
//	R=D-(B*256^2+G*256)
//
//	Ex:
//   
//	Color:   |    RGB values:   |  Decimal value:
//	---------|------------------|----------------
//	Red:     |    255/000/000   |  255
//	Green:   |    000/255/000   |  65280
//	Blue:    |    000/000/255   |  16711680
//	Cyan:    |    000/255/255   |  16776960
//	Magenta: |    255/000/255   |  16711935
//	Yellow:  |    255/255/000   |  65565
//	White:   |    255/255/255   |  0
//	Black:   |    000/000/000   |  16777215
//
//2: Coordinates of the top-left corner
//3: Is always 0 0
//4: Is always 0
//5: Is always 1
//6: Number of couples of coordinates+space+x[i]+space+y[i] or width+space+height in case of a rectangle
//7: The roi number, in case of a multiple roi file (starts at 1)



/**
 * This class provides a way to read/modify/save rgn files generated by the 
 * Metamorph software
 * @author fab
 */
public class rgnFile {
    /** Directory **/
    public String Directory="";

    /** Basename **/
    public String BaseName="";

    /** Stores the Rois as an ArrayList of rois **/
    public ArrayList<roi> rois=new ArrayList<roi>();
    
    /** Stores the number of rois **/
    public int nRois=0;
    
    
    /**
     * Either creates a new empty rgnFile or reads an existing one in case the showDialog 
     * argument is set to true
     * @param showDialog should be true to display a read dialog box
     */
    public rgnFile(boolean showDialog){
        if(showDialog){
            OpenDialog od=new OpenDialog("Select the rgn file in the source folder", null, "*.rgn");
            Directory=od.getDirectory();
            BaseName=od.getFileName();
            if(BaseName!=null){
                BaseName=BaseName.replace(".rgn", "").replace(".RGN", "");
                read();
            }else{
                IJ.showStatus("Import of a Metamorph rgn file has been canceled");
            }
        }
    }
    
    /**
     * Creates a new rgnFile object by reading an existing Metamorph rgn file
     * @param directory directory where the file is stored
     * @param fileName name of the nd file to be read
     */
    public rgnFile(String directory, String fileName){
        read(directory, fileName);
    }
    
    /**
     * Read a Metamorph rgn file, using the directory and filename provided when 
     * the object was built
     */
    public void read(){
        read(Directory, BaseName);
    }
    
    /**
     * Read a Metamorph rgn file, using the directory and filename provided as arguments
     * @param directory directory containing the rgn to read
     * @param filename file name of the rgn to read
     */
    public void read(String directory, String filename){
        Directory=directory;
        BaseName=filename.replace(".rgn", "").replace(".RGN", "");
        
        BufferedReader in=null;
        
        try {
            in=new BufferedReader(new FileReader(Directory+BaseName+".rgn"));
            String line=in.readLine();
            
            while(line!=null){
                addRoi(new roi(line));
                line=in.readLine();
            }
        
        } catch (IOException ex) {
            Logger.getLogger(rgnFile.class.getName()).log(Level.SEVERE, "An error occured while reading the Metamorph rgn file", ex);
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                Logger.getLogger(ndFile.class.getName()).log(Level.SEVERE, "An error occured while reading the Metamorph rgn file", ex);
            }
        }
        IJ.showStatus(nRois+" roi(s) found in the Metamorph rgn file");
    }
    
    /**
     * Adds a roi to the rgnFile
     * @param roi 
     */
    public void addRoi(roi roi){
        rois.add(roi);
        nRois++;
    }
    
    /**
     * Writes the current Metamorph rgn file, to the location pointed by the user
     */
    public void write(){
        SaveDialog sd=new SaveDialog("Save the rgn file to...", null, ".rgn");
        String directory=sd.getDirectory();
        String filename=sd.getFileName();
        if(filename!=null){
            filename=filename.replace(".rgn", "").replace(".RGN", "");
            write(directory+filename);
        }else{
            IJ.showStatus("Export to Metamorph rgn file has been canceled");
        }
    }
    
    /**
     * Writes the current Metamorph rgn file, to the provided path
     * @param filePath the destination path
     */
    public void write(String filePath){
        if(!filePath.endsWith(".rgn")) filePath=filePath+".rgn";
        
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(filePath));
            for(int i=0; i<nRois; i++) out.write(rois.get(i).getMMFormattedRoi(i+1));
        } catch (IOException ex) {
            Logger.getLogger(ndFile.class.getName()).log(Level.SEVERE, "An error occured while writing the Metamorph rgn file", ex);
        } finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(ndFile.class.getName()).log(Level.SEVERE, "An error occured while writing the Metamorph rgn file", ex);
            }
        }
    }
}
